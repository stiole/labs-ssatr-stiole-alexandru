/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ro.utcluj.rabbitmq.taxi;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;
import com.rabbitmq.client.Delivery;
import java.io.IOException;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mihai
 */
public class TaxiClientApp extends javax.swing.JFrame implements DeliverCallback, Runnable{
    
    private String clientID;
    private String CLIENT_QUEUE_NAME;
    private String FANOUT_QUEUE_NAME_BOOKING = "booking-requests";
    /**
     * Creates new form TaxiClientApp
     */
    public TaxiClientApp() {
        initComponents();
    }
    
    public TaxiClientApp(String clientId) {
        initComponents();
        this.clientID = clientId;
        CLIENT_QUEUE_NAME = "orderconfirmation_"+clientId;
        
        //start thread which call startReceive() method required to consume messages received on client queue. 
        new Thread(this).start();
        this.txtClientId.setText(clientId);
    }
    
    public void run(){
        try {
            startReceiver();
        } catch (IOException ex) {
            Logger.getLogger(TaxiDriverApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TimeoutException ex) {
            Logger.getLogger(TaxiDriverApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Wait for messages to be received on client queue. On this queue we receive name of the driver who confirm our order request OR confirm order complete.
     * 
     * IMPORTANT - Because this is a blocking method we need to call it from inside a separate thread (notice current class implement Runnable interface, implements run() and run() calls this method.  
     * @throws IOException
     * @throws TimeoutException 
     */
    public void startReceiver() throws IOException, TimeoutException{
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost"); // Change if your RabbitMQ server is not on localhost
        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        channel.queueDeclare(CLIENT_QUEUE_NAME, false, false, false, null);
        System.out.println(" [*] Waiting for messages. To exit press CTRL+C");

        System.out.println("Start consuming messages...");
        channel.basicConsume(CLIENT_QUEUE_NAME, true, this, consumerTag -> { });
    }
    
    /**
     * Request a new order by sending name of the client. We consider name of the client to be unique, no validation is done on this. 
     * Requests are sent to fanout queue which is responsbile to redirect request to ALL drivers queues. 
     * @param msg
     * @throws Exception 
     */
    public void sendRequestOrderToDrivers(String msg) throws Exception{
        ConnectionFactory factory = new ConnectionFactory();
        factory.setHost("localhost"); // Change this if your RabbitMQ is not running locally
        try (Connection connection = factory.newConnection();
            Channel channel = connection.createChannel()) {
            channel.basicPublish(FANOUT_QUEUE_NAME_BOOKING, "", null, msg.getBytes());
            System.out.println(" [x] Sent '" + msg + "'");
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bOrder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtOrderConfirmation = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtClientId = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bOrder.setText("Request Taxi");
        bOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOrderActionPerformed(evt);
            }
        });

        jLabel1.setText("Driver confirmation");

        txtOrderConfirmation.setEditable(false);

        jLabel2.setText("Client ID:");

        txtClientId.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtClientId, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOrderConfirmation)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bOrder)
                    .addComponent(jLabel2)
                    .addComponent(txtClientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtOrderConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOrderActionPerformed
        try {
            sendRequestOrderToDrivers(clientID);
        } catch (Exception ex) {
            Logger.getLogger(TaxiClientApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bOrderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaxiClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaxiClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaxiClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaxiClientApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaxiClientApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtClientId;
    private javax.swing.JTextField txtOrderConfirmation;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Method called when a message is received on client queue. DeliverCallback interface is implemented bu current class and requires this method t be implementd.
     * 
     * @param string
     * @param dlvr
     * @throws IOException 
     */
    @Override
    public void handle(String string, Delivery dlvr) throws IOException {
        String message = new String(dlvr.getBody(), "UTF-8");
        if(txtOrderConfirmation.getText().length()==0){
            //if txt field is empty then we consider message received is a confirmaiton of the new order confirmed by driver (messae contains drvier name)        
            this.txtOrderConfirmation.setText(message);
            this.bOrder.setEnabled(false);
        }else{
            //if txt field not empty then we consider message received is a confirmation of the order complete (finalized). 
            this.txtOrderConfirmation.setText("");
            this.bOrder.setEnabled(true);
        }
    }
}
